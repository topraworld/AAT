package org.compiere.process;

import java.util.Properties;

import org.compiere.apps.ADialog;
import org.compiere.model.CalloutEngine;
import org.compiere.model.GridField;
import org.compiere.model.GridTab;
import org.compiere.model.GridTable;
import org.compiere.model.MBPartner;
import org.compiere.model.MProduct;

public class StudentReniwel extends CalloutEngine{

	//Created by chathuranga - Topra (Pvt) Ltd
	//Date - 2016/06/07
	//AAT Customization
	
	public String getLastRenYear_StudentID (Properties ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
	{
		if(value!=null && mTab.getValue("C_DocTypeTarget_ID") != null){
			try{
				int c_bpartner_id =(mTab.getValue("c_bpartner_id")) == null ? 0:(Integer)mTab.getValue("c_bpartner_id");
				MBPartner bpartner = MBPartner.get(ctx,c_bpartner_id);
				
				//clear existing data
				mTab.setValue("last_renewed_year", "");
				mTab.setValue("c_student_id", "");
				
				//Membership reniewel target document id > C_DocTypeTarget_ID=1000108
				if(mTab.getValue("C_DocTypeTarget_ID").toString().equals("1000108")){
					if(bpartner.get_Value("mem_last_renew_year")!=null){
						mTab.setValue("last_renewed_year", bpartner.get_Value("mem_last_renew_year").toString());
						mTab.setValue("c_student_id", bpartner.get_Value("value").toString());
					}
				//Student reniewel target document id > 	
				}else if(mTab.getValue("C_DocTypeTarget_ID").toString().equals("1000049")){
					if(bpartner.get_Value("last_renewed_year")!=null && bpartner.get_Value("c_student_id")!=null){
						mTab.setValue("last_renewed_year", bpartner.get_Value("last_renewed_year").toString());
						mTab.setValue("c_student_id", bpartner.get_Value("c_student_id").toString());
						
					}else{
						ADialog.error(WindowNo, null, "Problem with Student last renewed year! Your are not allowed to make reniewel for this student.");
					}
				}
			}
			catch(Exception ex){
				ex.printStackTrace();
			}
		}
		return "";	
	}
	
	//org.compiere.process.StudentReniwel.validateCurrentYearReniewel
	public void validateCurrentYearReniewel(Properties ctx, int WindowNo, GridTab mTab, GridField mField, Object value){
		try{
			if(value!=null){
				GridTab pmTab = mTab.getParentTab();
				//validate for document type for student renievel
				if(pmTab.getValue("C_DocTypeTarget_ID").toString().equals("1000049")){
					//validate last reniewed not null
					String lry = (pmTab.get_ValueAsString("last_renewed_year")) == null?"":pmTab.get_ValueAsString("last_renewed_year");
					if(!lry.equals("")){
						//get user entered product validate for current year
						int current_year = Integer.parseInt(lry);
						MProduct mProduct= MProduct.get(ctx,Integer.parseInt(mTab.getValue("m_product_id").toString()));
						int search_key = Integer.parseInt(mProduct.getValue().substring(2));//to get the product year from search key
						
						if(search_key > current_year){
							this.validateDuplicateLine(ctx , WindowNo, mTab,mField , mProduct , current_year);
							//this.validateRenewOrder(ctx,WindowNo ,mTab , mField,mProduct);
							return;
						}
						else{
							mTab.dataIgnore();
							ADialog.error(WindowNo, null, "Invalid selection - Reneval year!");
						}
						
					}else{
						mTab.dataIgnore();
						ADialog.error(WindowNo, null, "Problem with Student last Reneved year! Your are not allowed to make reniewel for this student.");
					}
				}
				else{
					return;
				}
			}
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	//validate for invoice line same product
	//only for service category products
	private void validateDuplicateLine(Properties ctx, int WindowNo, GridTab mTab, GridField mField ,MProduct mProduct , int lry){
		
		try{
			//get the order of reniewel ex : 2015,2016,2017
			if(validateRenewOrder(ctx,WindowNo ,mTab , mField, mProduct , lry)){
				
				int rowCount = mTab.getRowCount();
				if(rowCount > 1){
					GridTable gt = mTab.getTableModel();
					String lastAdded = mTab.getValue("m_product_id").toString();
					String existing = "";
					
					for(int i = 0; i < (rowCount-1) ;i++){
						existing = gt.getValueAt(i, 0).toString();
						if(lastAdded.equals(existing)){
							//get order of reniewel
							mTab.dataIgnore();
							ADialog.error(WindowNo, null, "Duplicate Reneval year!.");
						}
						else{
							
						}
					}	
				}
			}
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	private boolean validateRenewOrder(Properties ctx, int WindowNo, GridTab mTab, GridField mField , MProduct mProduct , int lry){
		boolean status = false;
		try{
			
			int rowCount = (mTab.getRowCount())-1;
			if(rowCount == 0){
				int lastAdded = Integer.parseInt(mProduct.get_ValueAsString("value").substring(2));
				//first adding product  validation for current reniwel year +1
				lastAdded = lastAdded - 1;
				if(!(lastAdded== lry)){
					mTab.dataIgnore();
					ADialog.error(WindowNo, null, "Invalid selection - Reneval year!");
				}
				else{
					status = true;
					return status; 
				}
			}
			else{
				//adding more than one year renievels
				GridTable gt = mTab.getTableModel();
				int lastAdded =Integer.parseInt(gt.getValueAt(rowCount - 1, 0).toString());
				MProduct last_mProduct= MProduct.get(ctx,lastAdded);
				int last_added_search_key = Integer.parseInt(last_mProduct.getValue().substring(2));//to get the product year from search key
				int newAdded = Integer.parseInt(mProduct.get_ValueAsString("value").substring(2));
				
				newAdded--;
				
				if(!(last_added_search_key == newAdded)){
					mTab.dataIgnore();
					ADialog.error(WindowNo, null, "Invalid selection - Reneval year!");
				}
				else{
					status = true;
					return status; 
				}
			}
			
		}catch(Exception ex){
			ex.printStackTrace();
		}
		return status;
	}

	
	//org.compiere.process.StudentReniwel.validateLessExcess
	//both student and member
	public String validateLessExcess(Properties ctx, int WindowNo, GridTab mTab, GridField mField, Object value){
		
		if(value != null){
			
			String c_doctypetarget_id = mTab.getParentTab().getValue("c_doctypetarget_id").toString();
			String str_paid =  mTab.getValue("priceactual").toString();
			String str_pricelist =  mTab.getValue("pricelist").toString();
			
			str_paid = str_paid.equals("")?"0":str_paid;
			str_pricelist = str_pricelist.equals("")?"0":str_pricelist;
			
			Double priceactual = Double.parseDouble(str_paid);
			Double pricelist = Double.parseDouble(str_pricelist);
			
			//VALIDATE FOR ONLY MEMBER PAYMENTS AND STUDENTS PAYMENTS
			if((priceactual> 0  && pricelist > 0) && (c_doctypetarget_id.equals("") || c_doctypetarget_id.equals("1000049"))){
				
				System.out.println(str_pricelist + "Saman Saman!" + str_paid );
				
			}
		}
		return "";
	}
	
}